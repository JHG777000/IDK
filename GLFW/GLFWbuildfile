
project := "GLFWProject".

project_version := "1.0.3".

buildfile_version := "1.0".

url_to_src := "https://github.com/glfw/glfw/archive/5595fa3ae60386bdb6ae4caf8f488779e3c342a3.zip".

build GLFWBuild.

 options.

  on test_enable("-t", "--test", "Enable GLFW test.").

  on toolchain_select("-s", "--select_toolchain=tool", "Select toolchain.").

  if ( is_mac ).

   on cocoa_build("-c", "--cocoa_build", "define _GLFW_COCOA.").

  end if.

  if ( is_linux ).

   on a_wayland_build("-a", "--a_wayland_build", "define _GLFW_WAYLAND.").

   on mir_build("-m", "--mir_build", "define _GLFW_MIR.").

   on x11_build("-x", "--x11_build", "define _GLFW_X11.").

   on have_xkbcommon("-h", "--have_xkbcommon", "define HAVE_XKBCOMMON_COMPOSE_H.").

  end if.

  if ( is_win ).

   on win32_build("-w", "--win32_build", "define _GLFW_WIN32.").

   on use_high_performance_GPU("-u", "--use_high_performance_GPU", "define _GLFW_USE_HYBRID_HPG.").

  end if.

  on osmesa_build("-o", "--osmesa_build", "define _GLFW_OSMESA.").

 end options.

 get test_enable.

 get toolchain_select.

 get x11_build.

 get win32_build.

 get cocoa_build.

 get a_wayland_build.

 get mir_build.

 get osmesa_build.

 get use_high_performance_GPU.

 get have_xkbcommon.

 var define_string := " ".

 if ( x11_build == true ).

  eval define_string := define_string + "-D_GLFW_X11".

 end if.

 if ( win32_build == true ).

  eval define_string := define_string + "-D_GLFW_WIN32".

 end if.

 if ( cocoa_build == true ).

  eval define_string := define_string + "-D_GLFW_COCOA".

 end if.

 if ( a_wayland_build == true ).

  eval define_string := define_string + "-D_GLFW_WAYLAND".

 end if.

 if ( mir_build == true ).

  eval define_string := define_string + "-D_GLFW_MIR".

 end if.

 if ( osmesa_build == true ).

  eval define_string := define_string + "-D_GLFW_OSMESA".

 end if.

 if ( use_high_performance_GPU == true ).

  eval define_string := define_string + "-D_GLFW_USE_HYBRID_HPG".

 end if.

 if ( have_xkbcommon == true ).

  eval define_string := define_string + "-DHAVE_XKBCOMMON_COMPOSE_H".

 end if.

 files common("src/context.c","src/init.c", "src/input.c",
  "src/monitor.c", "src/vulkan.c", "src/window.c").

 if ( is_win ).

  if ( toolchain_select == nil ).

   var toolchain_select := "gcc".

  end if.

  libraries libs("gdi32").

   files win("src/win32_init.c", "src/win32_joystick.c",
    "src/win32_monitor.c", "src/win32_time.c", "src/win32_thread.c", "src/win32_window.c",
    "src/wgl_context.c", "src/egl_context.c", "src/osmesa_context.c").

  sources GLFWSource(common,win,libs).

 end if.

if ( is_mac ).

  var toolchain_select := "clang".

  frameworks libs("Cocoa","IOKit","CoreFoundation","CoreVideo").

  files mac("src/cocoa_init.m", "src/cocoa_joystick.m",
   "src/cocoa_monitor.m", "src/cocoa_window.m", "src/cocoa_time.c", "src/posix_thread.c",
   "src/nsgl_context.m", "src/egl_context.c", "src/osmesa_context.c").

  sources GLFWSource(common,mac,libs).

end if.

if ( is_linux ).

 if ( toolchain_select == nil ).

  var toolchain_select := "gcc".

 end if.

 libraries libs("m","rt").

 if ( a_wayland_build ).

 files linux("src/wl_init.c", "src/wl_monitor.c", "src/wl_window.c",
  "src/posix_time.c", "src/posix_thread.c", "src/xkb_unicode.c",
  "src/egl_context.c", "src/osmesa_context.c", "src/linux_joystick.c").

  end if.

 if ( mir_build ).

 files linux("src/mir_init.c", "src/mir_monitor.c", "src/mir_window.c",
  "src/linux_joystick.c", "src/posix_time.c", "src/posix_thread.c", "src/xkb_unicode.c",
  "src/egl_context.c", "src/osmesa_context.c").

 end if.

 if ( x11_build ).

 files linux("src/x11_init.c", "src/x11_monitor.c", "src/x11_window.c",
  "src/xkb_unicode.c", "src/posix_time.c", "src/posix_thread.c", "src/glx_context.c",
  "src/egl_context.c", "src/osmesa_context.c", "src/linux_joystick.c").

 end if.

 sources GLFWSource(common,linux,libs).

end if.

 make filepath include_path from "resources" to "include".

 compiler GLFWCompilerFlags("-Wall","-I " + include_path, define_string).

 toolchain GLFWToolChain(toolchain_select,GLFWCompilerFlags).

 output libglfw3("library",GLFWSource,GLFWToolChain).

 if ( test_enable ).

  message("Running GLFWTest...").

  make filepath test_include_path from "resources" to "deps".

  files GLFWTestFiles("deps/glad.c", "examples/boing.c").

  compiler GLFWTestCompilerFlags("-Wall","-I " + include_path, "-I " + test_include_path).

  toolchain GLFWTestToolChain(toolchain_select,GLFWTestCompilerFlags).

  sources GLFWTestSource(GLFWTestFiles,libglfw3).

  output GLFWTest("application",GLFWTestSource,GLFWTestToolChain).

  launch(GLFWTest).

  message("Ran GLFWTest.").

 end if.

end build.

build clean_build.

 message("Cleaning GLFW...").

 clean("build").

end build.

default GLFWBuild.



